{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "#importing pm4py, pandas\n",
    "import pm4py\n",
    "import pandas as pd\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "f8076340d9af493f865a3470d8df0bad",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(FloatProgress(value=0.0, description='parsing log, completed traces :: ', max=31509.0, style=Pr…"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "#importing event log\n",
    "from pm4py.objects.log.importer.xes import importer as xes_importer\n",
    "log = xes_importer.apply('SPA_BPI_Challenge_2017.xes')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>case_id</th>\n",
       "      <th>activity_name</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>[A_Create Application, A_Submitted, W_Handle l...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>[A_Create Application, A_Submitted, W_Handle l...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>[A_Create Application, A_Submitted, W_Handle l...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>[A_Create Application, A_Submitted, W_Handle l...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>[A_Create Application, A_Submitted, W_Handle l...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31504</th>\n",
       "      <td>31504</td>\n",
       "      <td>[A_Create Application, A_Submitted, W_Handle l...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31505</th>\n",
       "      <td>31505</td>\n",
       "      <td>[A_Create Application, A_Submitted, W_Handle l...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31506</th>\n",
       "      <td>31506</td>\n",
       "      <td>[A_Create Application, A_Submitted, W_Handle l...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31507</th>\n",
       "      <td>31507</td>\n",
       "      <td>[A_Create Application, A_Submitted, W_Handle l...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31508</th>\n",
       "      <td>31508</td>\n",
       "      <td>[A_Create Application, A_Submitted, W_Handle l...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>31509 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       case_id                                      activity_name\n",
       "0            0  [A_Create Application, A_Submitted, W_Handle l...\n",
       "1            1  [A_Create Application, A_Submitted, W_Handle l...\n",
       "2            2  [A_Create Application, A_Submitted, W_Handle l...\n",
       "3            3  [A_Create Application, A_Submitted, W_Handle l...\n",
       "4            4  [A_Create Application, A_Submitted, W_Handle l...\n",
       "...        ...                                                ...\n",
       "31504    31504  [A_Create Application, A_Submitted, W_Handle l...\n",
       "31505    31505  [A_Create Application, A_Submitted, W_Handle l...\n",
       "31506    31506  [A_Create Application, A_Submitted, W_Handle l...\n",
       "31507    31507  [A_Create Application, A_Submitted, W_Handle l...\n",
       "31508    31508  [A_Create Application, A_Submitted, W_Handle l...\n",
       "\n",
       "[31509 rows x 2 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#converting event log to pandas dataframe\n",
    "event_log_dict = {}\n",
    "for case_index, case in enumerate(log):\n",
    "    event_trace= []\n",
    "    for event_index, event in enumerate(case):\n",
    "        event_trace.append(str(event['concept:name']))\n",
    "        \n",
    "    final_list = [case_index, event_trace]\n",
    "    event_log_dict[case_index] = final_list\n",
    "    \n",
    "event_log = pd.DataFrame.from_dict(event_log_dict,orient='index')\n",
    "event_log.columns =['case_id', 'activity_name']\n",
    "event_log"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "#get the next activity list from the n-gram subset\n",
    "def check_seq_exists(activity_name, subset, index):\n",
    "    list_of_next_activities = []\n",
    "    for i in range(0,len(activity_name)):\n",
    "        if list(activity_name[i:i+len(subset)])==subset:\n",
    "            if (i != len(activity_name)-1):\n",
    "                if activity_name[i+len(subset)]:\n",
    "                    list_of_next_activities.append(activity_name[i+len(subset)])\n",
    "    return list_of_next_activities"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "#get the probabilities of the possible next activities\n",
    "def get_prob_next_act(next_act_count, seq_count):\n",
    "    prob_activities = {}\n",
    "    for next_act in next_act_count:\n",
    "        prob_activities[next_act] = next_act_count[next_act]/seq_count\n",
    "    return prob_activities"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_prob_nxt_tasks(process_instance, n_grams, event_log):\n",
    "    n_gram_dict = {}\n",
    "    for n_gram in range(1,n_grams+1):\n",
    "        n_gram_seq = process_instance[-n_gram:]\n",
    "        \n",
    "        seq_count = 0                          #total number of matching cases\n",
    "        next_act_count = {}                    #dictionary storing next activity with its count\n",
    "        \n",
    "        for pos in event_log.index:\n",
    "            #getting the list of all next activities of the current n_gram sequence\n",
    "            next_activity_list = check_seq_exists(event_log['activity_name'][pos], n_gram_seq, pos)\n",
    "            \n",
    "            if next_activity_list:\n",
    "                for activity in next_activity_list:\n",
    "                    if activity in next_act_count.keys():\n",
    "                        next_act_count[activity] = next_act_count[activity] + 1\n",
    "                    else:\n",
    "                        next_act_count[activity] = 1\n",
    "                #getting the total count of cases where the n-gram sequence appears\n",
    "                seq_count = sum(next_act_count.values())\n",
    "                \n",
    "        activities_prob = get_prob_next_act(next_act_count, seq_count)\n",
    "        \n",
    "        n_gram_dict[(str(n_gram)+\"-gram\")] = activities_prob\n",
    "    \n",
    "    #create dataframe from the dictionary\n",
    "    df1 = pd.DataFrame.from_dict(n_gram_dict,orient='index')\n",
    "    df1.fillna(0, inplace=True)\n",
    "    display(df1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter the n for n-gram: 3\n",
      "Enter the running process instance: \n"
     ]
    }
   ],
   "source": [
    "#input n for n-gram\n",
    "n_grams = int(input('Enter the n for n-gram: '))\n",
    "\n",
    "#input('Enter the process instance')\n",
    "process_instance = []\n",
    "print('Enter the running process instance: ')\n",
    "while True:\n",
    "    instance = input()\n",
    "    if instance:\n",
    "        process_instance.append(instance)\n",
    "    else:\n",
    "        break\n",
    "\n",
    "#condition to check n'<=len(process_instance)\n",
    "if n_grams <= len(process_instance):\n",
    "    get_prob_nxt_tasks(process_instance, n_grams, event_log)\n",
    "else:\n",
    "    print('The value of n for n-gram is greater than the length of the input running process instance.')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
